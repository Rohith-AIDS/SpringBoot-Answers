1.Playlist Management Api:
-----------------------
package com.example.playlist.controller;

import com.example.playlist.model.PlayList;
import com.example.playlist.repository.PlayListRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/v1/playlists")
public class PlayListController {

    @Autowired
    private PlayListRepository repository;

    // POST: Create a new playlist
    @PostMapping
    public ResponseEntity<PlayList> createPlayList(@RequestBody PlayList playList) {
        PlayList saved = repository.save(playList);
        return ResponseEntity.status(201).body(saved);
    }

   

@GetMapping
public ResponseEntity<List<PlayList>> getAllPlayLists() {
    List<PlayList> playlists = repository.findAll(Sort.by(Sort.Direction.DESC, "id"));
    return ResponseEntity.ok(playlists);
}


    // GET: Get playlist by ID
    @GetMapping("/{id}")
    public ResponseEntity<PlayList> getPlayListById(@PathVariable Long id) {
        return repository.findById(id)
                .map(ResponseEntity::ok)
                .orElse(ResponseEntity.status(404).body(null));
    }

    // DELETE: Delete playlist by ID
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deletePlayList(@PathVariable Long id) {
        if (repository.existsById(id)) {
            repository.deleteById(id);
            return ResponseEntity.noContent().build();
        } else {
            return ResponseEntity.status(404).build();
        }
    }
}
2.Track Information APIs
------------------------
service:package com.music.track.service.impl;


import com.music.track.dto.TrackRequest;
import com.music.track.model.Track;
import com.music.track.repository.TrackRepository;
import com.music.track.service.TrackService;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class TrackServiceImpl implements TrackService {
	@Autowired
	private TrackRepository trackRepository;
    @Override
    public Track createTrack(TrackRequest trackRequest) {
        Track t=new Track();
        t.setTitle(trackRequest.getTitle());
        t.setAlbumName(trackRequest.getAlbumName());
        t.setReleaseDate(trackRequest.getReleaseDate());
        t.setPlayCount(trackRequest.getPlayCount());
        return trackRepository.save(t);
    }
    @Override
    public List<Track> getAllTracks() {
        return trackRepository.findAll();
    }
    
    @Override
    public void deleteTrack(Long trackId) {
    	trackRepository.deleteById(trackId);
    }

    
    @Override
    public List<Track> sortedTracks() {
        return trackRepository.findAll(Sort.by("title"));
    }
   
    
}
dto:package com.music.track.dto;

import java.util.Date;

public class TrackRequest {

private String title;
private String albumName;
private Date releaseDate;
private Integer playCount;
 public String getTitle() {
	return title;
}
public void setTitle(String title) {
	this.title = title;
}
public String getAlbumName() {
	return albumName;
}
public void setAlbumName(String albumName) {
	this.albumName = albumName;
}
public Date getReleaseDate() {
	return releaseDate;
}
public void setReleaseDate(Date releaseDate) {
	this.releaseDate = releaseDate;
}
public Integer getPlayCount() {
	return playCount;
}
public void setPlayCount(Integer playCount) {
	this.playCount = playCount;
}
public  TrackRequest(String title,
                           String albumName,
                           Date releaseDate,
                           Integer playCount) {
	this.title=title;
	this.releaseDate=releaseDate;
	this.albumName=albumName;
	this.playCount=playCount;
}
}
controller:package com.music.track.controller;

import com.music.track.dto.TrackRequest;
import com.music.track.model.Track;
import com.music.track.service.TrackService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("music/platform/v1/tracks")
public class TrackController {
	
    private final TrackService trackService;
    @Autowired
    public TrackController(TrackService trackService) {
        this.trackService = trackService;
    }
    /**
     * Create a track
     * @param trackRequest
     * @return
     */
    @PostMapping()
    public ResponseEntity<Track> createTrack(@RequestBody TrackRequest trackRequest){
    	Track createdTrack =trackService.createTrack(trackRequest);
        return ResponseEntity.status(201).body(createdTrack);
    }
    
    /**
     * Get all tracks
     * @return
     */
    @GetMapping()
    public ResponseEntity<List<Track>> getAllTracks(){
        return ResponseEntity.ok(trackService.getAllTracks());
    }
    /**
     * Delete a track
     * @param trackId
     * @return
     */
    @DeleteMapping("/{trackId}")
    public ResponseEntity<Void> deleteTrack(@PathVariable Long trackId){
    	trackService.deleteTrack(trackId);
        return ResponseEntity.noContent().build();
    }

    /**
     * Get Track sorted
     * @return
     */
    @GetMapping("/sorted")
    public List<Track> getTracksSorted() {
        return trackService.sortedTracks();
        
    }
}
3. Setting up the Trading Platform
----------------------------------
service:package com.example.trading.service;

import com.example.trading.model.Trader;
import com.example.trading.repository.TraderRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.List;

@Service
public class TraderService {

    @Autowired
    private TraderRepository repository;

    public Trader registerTrader(Trader trader) {
        if (repository.existsByEmail(trader.getEmail())) {
            return null;
        }
        trader.setCreatedAt(LocalDateTime.now());
        trader.setUpdatedAt(LocalDateTime.now());
        return repository.save(trader);
    }

    public List<Trader> getAllTraders() {
        return repository.findAllByOrderByIdAsc();
    }

    public Trader getTraderByEmail(String email) {
        return repository.findByEmail(email);
    }

    public Trader updateTraderName(String email, String name) {
        Trader trader = repository.findByEmail(email);
        if (trader != null) {
            trader.setName(name);
            trader.setUpdatedAt(LocalDateTime.now());
            return repository.save(trader);
        }
        return null;
    }

    public Trader addMoney(String email, Integer amount) {
        Trader trader = repository.findByEmail(email);
        if (trader != null) {
            trader.setAmount(trader.getAmount() + amount);
            trader.setUpdatedAt(LocalDateTime.now());
            return repository.save(trader);
        }
        return null;
    }
}
controller:package com.example.trading.controller;

import com.example.trading.model.Trader;
import com.example.trading.service.TraderService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/trading/traders")
public class TraderController {

    @Autowired
    private TraderService service;

    @PostMapping("/register")
    public ResponseEntity<Trader> registerTrader(@RequestBody Trader trader) {
        Trader saved = service.registerTrader(trader);
        if (saved == null) {
            return ResponseEntity.badRequest().build(); // 400
        }
        return ResponseEntity.status(201).body(saved); // 201
    }

    @GetMapping("/all")
    public ResponseEntity<List<Trader>> getAllTraders() {
        return ResponseEntity.ok(service.getAllTraders()); // 200
    }

    @GetMapping
    public ResponseEntity<Trader> getTraderByEmail(@RequestParam String email) {
        Trader trader = service.getTraderByEmail(email);
        if (trader == null) {
            return ResponseEntity.status(404).build(); // 404
        }
        return ResponseEntity.ok(trader); // 200
    }

    @PutMapping
    public ResponseEntity<Trader> updateTraderName(@RequestBody Trader request) {
        Trader updated = service.updateTraderName(request.getEmail(), request.getName());
        if (updated == null) {
            return ResponseEntity.status(404).build(); // 404
        }
        return ResponseEntity.ok(updated); // 200
    }

    @PutMapping("/add")
    public ResponseEntity<Trader> addMoney(@RequestBody Trader request) {
        Trader updated = service.addMoney(request.getEmail(), request.getAmount());
        if (updated == null) {
            return ResponseEntity.status(404).build(); // 404
        }
        return ResponseEntity.ok(updated); // 200
    }
}
4.Rest Controller Advice Setup
------------------------------
package com.hackerrank.restcontrolleradvice.controller;
 
import com.hackerrank.restcontrolleradvice.dto.FizzBuzzResponse;
import com.hackerrank.restcontrolleradvice.enums.FizzBuzzEnum;
import com.hackerrank.restcontrolleradvice.exception.*;
 
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
 
@RestController
public class FizzBuzzController {
 
    @GetMapping(value = "/controller_advice/{code}", produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<FizzBuzzResponse> getFizzBuzzResponse(@PathVariable("code") String code)
            throws FizzException, BuzzException, FizzBuzzException {
 
        if (FizzBuzzEnum.FIZZ.getValue().equals(code)) {
            throw new FizzException("Fizz Exception has been thrown", "Internal Server Error");
        } else if (FizzBuzzEnum.BUZZ.getValue().equals(code)) {
            throw new BuzzException("Buzz Exception has been thrown", "Bad Request");
        } else if (FizzBuzzEnum.FIZZBUZZ.getValue().equals(code)) {
            throw new FizzBuzzException("FizzBuzz Exception has been thrown", "Insufficient Storage");
        }
 
        // ✅ Success response
        return ResponseEntity.ok(new FizzBuzzResponse("Successfully completed fizzbuzz test", 200));
    }
}
exception:
package com.hackerrank.restcontrolleradvice.exception;
 
import com.hackerrank.restcontrolleradvice.dto.GlobalError;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;
 
@RestControllerAdvice
public class FizzBuzzExceptionHandler {
 
    @ExceptionHandler(FizzException.class)
    public ResponseEntity<GlobalError> handleFizzException(FizzException ex) {
        GlobalError error = new GlobalError(ex.getMessage(), ex.getErrorReason());
        return new ResponseEntity<>(error, HttpStatus.INTERNAL_SERVER_ERROR); // 500
    }
 
    @ExceptionHandler(BuzzException.class)
    public ResponseEntity<GlobalError> handleBuzzException(BuzzException ex) {
        GlobalError error = new GlobalError(ex.getMessage(), ex.getErrorReason());
        return new ResponseEntity<>(error, HttpStatus.BAD_REQUEST); // 400
    }
 
    @ExceptionHandler(FizzBuzzException.class)
    public ResponseEntity<GlobalError> handleFizzBuzzException(FizzBuzzException ex) {
        GlobalError error = new GlobalError(ex.getMessage(), ex.getErrorReason());
        return new ResponseEntity<>(error, HttpStatus.INSUFFICIENT_STORAGE); // 507
    }
}
 
5. Custom Request Validator
---------------------------
package com.hackerrank.validator.validation;

import com.hackerrank.validator.model.Employee;
import org.springframework.validation.Errors;
import org.springframework.validation.Validator;

public class EmployeeValidator implements Validator {
    @Override
    public boolean supports(Class<?> aClass) {
        return Employee.class.isAssignableFrom(aClass);
    }

    @Override
    public void validate(Object employeeObject, Errors errors) {
    	Employee employee = (Employee) employeeObject;

        
    	if (employee.getFullName() == null || employee.getFullName().trim().isEmpty()) {
            errors.rejectValue("fullName", "fullName.empty", "The fullName is a mandatory field");
        }

        // mobileNumber
        if (employee.getMobileNumber() == null || String.valueOf(employee.getMobileNumber()).length() != 10) {
            errors.rejectValue("mobileNumber", "mobileNumber.invalid", "The mobileNumber is a mandatory field");
        }

        // emailId
        if (employee.getEmailId() == null || employee.getEmailId().trim().isEmpty()) {
            errors.rejectValue("emailId", "emailId.empty", "The emailId is a mandatory field");
        } else if (!employee.getEmailId().contains("@")) {
            errors.rejectValue("emailId", "emailId.format", "The emailId should be in a valid email format");
        }

        // dateOfBirth
        if (employee.getDateOfBirth() == null || employee.getDateOfBirth().trim().isEmpty()) {
            errors.rejectValue("dateOfBirth", "dateOfBirth.empty", "The dateOfBirth is a mandatory field");
        } else if (!employee.getDateOfBirth().matches("^\\d{4}-\\d{2}-\\d{2}$")) {
            errors.rejectValue("dateOfBirth", "dateOfBirth.format", "The dateOfBirth should be in YYYY-MM-DD format");
        }
    }
}
